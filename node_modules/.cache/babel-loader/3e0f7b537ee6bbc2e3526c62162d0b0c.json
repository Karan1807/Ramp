{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null) {\n      return;\n    }\n\n    const pageToFetch = paginatedTransactions === null ? 0 : paginatedTransactions.nextPage;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: pageToFetch\n    });\n    setPaginatedTransactions(previousResponse => {\n      var _previousResponse$dat;\n\n      if (response === null) return previousResponse;\n      const previousData = (_previousResponse$dat = previousResponse === null || previousResponse === void 0 ? void 0 : previousResponse.data) !== null && _previousResponse$dat !== void 0 ? _previousResponse$dat : [];\n      const existingIds = new Set(previousData.map(t => t.id));\n      const newTransactions = response.data.filter(t => !existingIds.has(t.id));\n      return {\n        data: [...previousData, ...newTransactions],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","nextPage","pageToFetch","response","page","previousResponse","previousData","data","existingIds","Set","map","t","id","newTransactions","filter","has","invalidateData"],"sources":["/Users/karansavaliya/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["\nimport { useCallback, useState } from \"react\"\nimport {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  Transaction,\n} from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<\n    PaginatedResponse<Transaction[]> | null\n  >(null)\n\n  const fetchAll = useCallback(async () => {\n    if (paginatedTransactions?.nextPage === null) {\n   \n      return\n    }\n\n    const pageToFetch =\n      paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n\n    const response = await fetchWithCache<\n      PaginatedResponse<Transaction[]>,\n      PaginatedRequestParams\n    >(\"paginatedTransactions\", { page: pageToFetch })\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) return previousResponse\n\n      const previousData = previousResponse?.data ?? []\n\n      \n      const existingIds = new Set(previousData.map(t => t.id))\n      const newTransactions = response.data.filter(t => !existingIds.has(t.id))\n\n      return {\n        data: [...previousData, ...newTransactions],\n        nextPage: response.nextPage,\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n  }\n}\n"],"mappings":";;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAOA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAEhE,IAFgE,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,IAAI,CAAAM,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEG,QAAvB,MAAoC,IAAxC,EAA8C;MAE5C;IACD;;IAED,MAAMC,WAAW,GACfJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACG,QAD7D;IAGA,MAAME,QAAQ,GAAG,MAAMP,cAAc,CAGnC,uBAHmC,EAGV;MAAEQ,IAAI,EAAEF;IAAR,CAHU,CAArC;IAKAH,wBAAwB,CAAEM,gBAAD,IAAsB;MAAA;;MAC7C,IAAIF,QAAQ,KAAK,IAAjB,EAAuB,OAAOE,gBAAP;MAEvB,MAAMC,YAAY,4BAAGD,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEE,IAArB,yEAA6B,EAA/C;MAGA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQH,YAAY,CAACI,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAACC,EAAxB,CAAR,CAApB;MACA,MAAMC,eAAe,GAAGV,QAAQ,CAACI,IAAT,CAAcO,MAAd,CAAqBH,CAAC,IAAI,CAACH,WAAW,CAACO,GAAZ,CAAgBJ,CAAC,CAACC,EAAlB,CAA3B,CAAxB;MAEA,OAAO;QACLL,IAAI,EAAE,CAAC,GAAGD,YAAJ,EAAkB,GAAGO,eAArB,CADD;QAELZ,QAAQ,EAAEE,QAAQ,CAACF;MAFd,CAAP;IAID,CAbuB,CAAxB;EAcD,CA5B2B,EA4BzB,CAACL,cAAD,EAAiBE,qBAAjB,CA5ByB,CAA5B;EA8BA,MAAMkB,cAAc,GAAGxB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IACLQ,IAAI,EAAET,qBADD;IAELD,OAFK;IAGLG,QAHK;IAILgB;EAJK,CAAP;AAMD;;GA9CerB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}